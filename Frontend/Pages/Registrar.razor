@page "/registrar"
@using DTO.ControleAcessos
@using Helpers
@inject IJSRuntime JS
@inject NavigationManager Navigation


<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="bg-white p-8 rounded-2xl shadow-lg w-full max-w-sm">
        <h2 class="text-3xl font-bold text-center text-blue-600 mb-6">
            Inserir Novo Usuário
        </h2>
        
        <form>
            <div class="mb-4 bg-gray">
                <label class="block text-gray-700 mb-2" for="nome">Nome:</label>
                <input type="text" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="nome" @bind="usuario.Nome" />
            </div>
            <div class="mb-4 bg-gray">
                <label class="block text-gray-700 mb-2" for="email">Email:</label>
                <input type="email" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="email" @bind="usuario.Email" />
            </div>
            <div class="mb-6">
                <label class="block text-gray-700 mb-2" for="Senha">Senha:</label>
                <input type="password" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="Senha" @bind="usuario.Senha" />
            </div>
            @if (!string.IsNullOrEmpty(mensagem))
            {
                <div class="alert alert-@(mensagemErro ? "danger" : "success") mt-2">
                    @mensagem
                </div>
            }

            <button type="button" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" @onclick="CriarUsuarioAsync">Criar Usuário</button>
        </form>
            <div class="mt-4 text-center">
                <a href="/login" class="text-sm text-blue-600 hover:underline">Fazer Login</a>
            </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? RedirecionarCasoSucesso { get; set; }

    private RegistrarUsuarioDTO usuario = new();
    private bool mensagemErro = false;
    private string? mensagem { get; set; }

    protected override void OnInitialized()
    {
        ApiBackend.JsRuntime = JS;
    }

    private async Task CriarUsuarioAsync()
    {
        mensagemErro = false;

        if (string.IsNullOrEmpty(usuario.Email))
        {
            mensagem = "É necessário informar o email.";
            mensagemErro = true;
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(usuario.Nome))
        {
            mensagem = "É necessário informar o nome.";
            mensagemErro = true;
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(usuario.Senha))
        {
            mensagem = "É necessário informar a senha.";
            mensagemErro = true;
            this.StateHasChanged();
            return;
        }

        try
        {
            var result = await ApiBackend.PostAsync("usuarios", usuario);
            mensagem = $"Usuário '{result.Nome}' criado com sucesso!";
            StateHasChanged();
            await SetTimeout(2000, () => Navigation.NavigateTo("/autenticacao/login"));
        }
        catch (Exception ex)
        {
            mensagem = ex.Message;
            mensagemErro = true;
            this.StateHasChanged();
            return;
        }
    }

    static async Task SetTimeout(int milliseconds, Action action)
    {
        await Task.Delay(milliseconds);
        action();
    }
}
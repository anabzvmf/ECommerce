@page "/produtos/registrar_produto"
@using Microsoft.AspNetCore.Components.Forms
@using DTO.Produtos
@using DTO.Imagem
@using Helpers
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="bg-white p-8 rounded-2xl shadow-lg w-full max-w-sm">
        <h2 class="text-3xl font-bold text-center text-blue-600 mb-6">
            Inserir Novo Produto
        </h2>
        
        <form>
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="nome">Nome do Produto:</label>
                <input type="text" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="nome" @bind="produto.Nome" />
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="descricao">Descrição:</label>
                <textarea class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="descricao" @bind="produto.Descricao"></textarea>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="preco">Preço:</label>
                <input type="number" step="0.01" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="preco" @bind="produto.Preco" />
            </div>
            
            <div class="mb-4">
                <label class="block text-gray-700 mb-2" for="Imagem">Imagem:</label>
                @* <InputFile type="file" class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100" id="Imagem" @onclick="HandleImageChange" /> *@
            </div>

            @if (!string.IsNullOrEmpty(mensagem))
            {
                <div class="alert alert-@(mensagemErro ? "danger" : "success") mt-2">
                    @mensagem
                </div>
            }

            <button type="button" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg" @onclick="CriarProdutoAsync">Criar Produto</button>
        </form>
        <div class="mt-4 text-center">
            <a href="/produtos/lista_produtos" class="text-sm text-blue-600 hover:underline">Ver Produtos</a>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? RedirecionarCasoSucesso { get; set; }

    private RegistrarProdutoDTO produto = new RegistrarProdutoDTO();
    private bool mensagemErro = false;
    private string? mensagem { get; set; }
    private IBrowserFile? imagemFile;

    protected override void OnInitialized()
    {
        ApiBackend.JsRuntime = JS;
    }

    private async Task CriarProdutoAsync()
    {
        mensagemErro = false;

        try
        {
            if (imagemFile != null)
            {
                produto.ImagemUrl = await SaveImageAsync(imagemFile);  
            }

            var result = await ApiBackend.PostAsync("produtos", produto);  
            Console.WriteLine($"[Produto] Iniciando cadastro para: {produto.Nome}");
            mensagem = $"Produto '{result.Nome}' criado com sucesso!";
            Console.WriteLine($"Produto '{result.Nome}' criado com sucesso!");
            StateHasChanged();

            
            string redirecionamento = RedirecionarCasoSucesso ?? "/produtos";
            await SetTimeout(2000, () => Navigation.NavigateTo(redirecionamento));
        }
        catch (Exception ex)
        {
            mensagem = ex.Message;
            mensagemErro = true;
            StateHasChanged();
        }
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        imagemFile = e.File;
        if (imagemFile != null)
        {
            // Lógica de manipulação da imagem...
        }
    }

    

    private async Task<string> SaveImageAsync(IBrowserFile file)
    {
        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine("wwwroot", "img", fileName);

        await using var stream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream);  

        return $"/img/{fileName}";  
    }

    private static async Task SetTimeout(int milliseconds, Action action)
    {
        await Task.Delay(milliseconds);  
        action();
    }
}
@page "/"
@using Frontend.Componentes
@using DTO.Produtos
@using Helpers
@inject IJSRuntime JS
@inject Frontend.Helpers.UsuarioService UsuarioService

<div class="max-w-7xl mx-auto">
    <!-- Hero Section -->
    <section class="bg-blue-600 text-white rounded-lg p-8 mb-8">
        <h1 class="text-4xl font-bold">Bem-vindo ao Nosso E-Commerce</h1>
        <p class="mt-2 text-xl">Encontre os melhores produtos aqui!</p>
    </section>

    <!-- Destaques -->
    @* <div class="grid grid-cols-1 md:grid-cols-3 gap-6 items-stretch">
        <ProductCard Title="Notebook Gamer" Price="R$ 4.999" Image="img/computador.png" />
        <ProductCard Title="Smartphone" Price="R$ 2.399" Image="img/celular.png" />
        <ProductCard Title="IPad" Price="R$ 3.399" Image="img/ipad.png" />
    </div> *@

    @if (!string.IsNullOrEmpty(Mensagem))
    {
        <div class="alert alert-info text-center">@Mensagem</div>
    }
    if (produtos == null)
    {
        <div class="text-center">Carregando produtos...</div>
    }
    else if (!produtos.Any())
    {
        <div class="text-center">Nenhum produto encontrado.</div>
    }
    else
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var produto in produtos)
            {
                <div class="bg-white p-4 rounded-lg shadow-md">
                    <img src="@produto.ImagemUrl" alt="@produto.Nome" class="w-full h-48 object-cover rounded-md mb-4" />
                    <h3 class="text-xl font-semibold text-blue-600">@produto.Nome</h3>
                    <p class="text-gray-700">@produto.Descricao</p>
                    <p class="mt-2 text-lg font-bold text-blue-500">R$ @produto.Preco</p>
                    <p class="mt-2 text-sm text-gray-500">Estoque: @produto.Estoque</p>

                    <div class="mt-4 flex justify-between items-center">
                        <button class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700" @onclick="() => AdicionarProdutoAoCarrinho(produto.Id)">
                            Carrinho
                        </button>
                    </div>

                    <div class="mt-4 flex justify-between items-center">
                        <button class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700" >
                            Comprar
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ProdutoDTO>? produtos;
    private bool carregando = false;
    private int paginaAtual = 1;
    private const int TamanhoPagina = 10;

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos();
    }

    private async Task CarregarProdutos()
    {
        if (carregando) return;

        carregando = true;
        try
        {
            var response = await ApiBackend.GetAsync<List<ProdutoDTO>>("produtos");
            if (response != null && response.Any())
            {
                if (produtos == null)
                    produtos = new List<ProdutoDTO>();

                produtos.AddRange(response);
                paginaAtual++;
            }
        }
        catch (Exception ex)
        {
            // Trate erros de forma adequada aqui
            Console.WriteLine(ex.Message);
        }
        finally
        {
            carregando = false;
            StateHasChanged();
        }
    }

    private string? Mensagem { get; set; }

    private async Task AdicionarProdutoAoCarrinho(long produtoId)
    {
        Mensagem = null;
        var usuario = await UsuarioService.ObterUsuarioLogadoAsync();
        if (usuario == null)
        {
            Mensagem = "Você precisa estar logado para adicionar ao carrinho.";
            StateHasChanged();
            return;
        }
        var idUsuario = usuario?.Id ?? 0;
        if (idUsuario == 0)
        {
            Mensagem = "Erro ao identificar o usuário logado. Faça login novamente.";
            StateHasChanged();
            return;
        }
        var item = new DTO.Carrinho.CarrinhoItemDTO
        {
            UsuarioId = idUsuario,
            ProdutoId = produtoId,
            Quantidade = 1
        };
        await ApiBackend.PostAsync<object, DTO.Carrinho.CarrinhoItemDTO>("carrinho/adicionar", item);
        Mensagem = "Produto adicionado ao carrinho!";
        StateHasChanged();
    }
}

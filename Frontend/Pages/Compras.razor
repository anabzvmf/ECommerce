@page "/compras"
@using Frontend.Componentes
@using Model.CarrinhoCompras;
@using UseCases.CarrinhoCompras;
@using UseCases.ControleAcessos;

@inject ICarrinhoService CarrinhoService;
@inject IUsuarioService UsuarioService;

<div class="max-w-7xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Minha Lista de Desejos</h1>

    @if (!string.IsNullOrEmpty(Mensagem))
    {
        <div class="alert alert-info text-center">@Mensagem</div>
    }
    
    @if (carrinho == null)
    {
        <div class="text-center">Carregando produtos...</div>
    }
    else if (!carrinho.Itens.Any())
    {
        <div class="text-center">Nenhum produto encontrado.</div>
    }
    else
    {
        <!-- Lista de Produtos -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            @foreach (var item in carrinho.Itens)
            {
                <div class="relative">
                    <div class="bg-white p-4 rounded-lg shadow-md flex flex-col justify-between">
                        <img src="@item.Produto.ImagemUrl" alt="@item.Produto.Nome" class="w-full h-48 object-cover rounded-md mb-4" />
                        <h3 class="text-xl font-semibold text-blue-600 truncate">@item.Produto.Nome</h3>
                        <p class="text-gray-700 truncate">@item.Produto.Descricao</p>
                        <p class="mt-2 text-lg font-bold text-blue-500">R$ @item.Produto.Preco</p>
                        <p class="mt-2 text-sm text-gray-500">Estoque: @item.Produto.Estoque</p>

                        <!-- Botão Remover -->
                        <button @onclick="() => RemoverDaLista(item.Produto.Id)"
                                class="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full 
                                       hover:bg-red-600 transition-colors shadow-md"
                                title="Remover">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div> 
                </div> 
            }
        </div> 

        <!-- Resumo e Ações -->
        <div class="bg-white rounded-lg shadow-md p-6 sticky bottom-4 border border-gray-200">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div>
                    <p class="text-lg font-semibold">Total: <span class="text-blue-600">@TotalLista.ToString("C")</span></p>
                    <p class="text-sm text-gray-500">@carrinho.Itens.Count iten(s) na lista</p>
                </div>

                <div class="flex gap-4">
                    <button @onclick="LimparLista"
                            class="px-4 py-2 border border-red-500 text-red-500 rounded-md 
                                   hover:bg-red-50 transition-colors">
                        Limpar Lista
                    </button>

                    <button @onclick="FinalizarCompra"
                            class="px-6 py-2 bg-blue-600 text-white rounded-md 
                                   hover:bg-blue-700 transition-colors">
                        Finalizar Compra (@carrinho.Itens.Count)
                    </button>
                </div>
            </div>
        </div> 
    }
</div> 

@code {

    private Carrinho? carrinho;
    private List<ItemCarrinho>? itens;
    private double TotalLista => itens.Sum(i=> i.Produto.Preco * i.Quantidade);

    private bool carregando = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos();
    }

    private async Task CarregarProdutos()
    {
        if(carregando) return;
        
        carregando = true;
        try
        {
            var usuario = await UsuarioService.ObterUsuarioLogadoAsync();
            var idUsuario = usuario?.Id ?? 0;
            var response = await CarrinhoService.ObterCarrinhoAsync(idUsuario);
            if(response != null)
            {
                if(carrinho == null)
                {
                    itens = new List<ItemCarrinho>();
                }
                itens = carrinho.Itens;
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            carregando = false;
            StateHasChanged();
        }
    }

    private string? Mensagem { get; set; }
    private void RemoverDaLista(long id)
    {
        
    }

    private void LimparLista()
    {
        
    }

    private void FinalizarCompra()
    {
        // Lógica para finalizar compra
        // Pode redirecionar para o carrinho ou checkout
    }
}